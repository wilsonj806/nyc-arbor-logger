{"version":3,"sources":["state/Context.tsx","components/NavBar.tsx","components/Spinner.tsx","state/genBarChart.js","state/useChart.tsx","components/Chart.tsx","components/Modal.tsx","components/MessageManager.tsx","App.tsx","index.tsx"],"names":["initState","endpoint","message","ApiContext","createContext","state","updateMessageFn","str","console","log","updateEndpointFn","reducer","type","action","payload","Provider","children","useReducer","dispatch","dispatchEndpointUpdate","dispatchUpdateEndpointWrap","dispatchUpdateMessage","dispatchUpdateMessageWrap","value","SecondaryArr","text","path","NavBar","props","useContext","useState","primaryValue","setPrimaryValue","shouldRenderSecondary","setRenderSecondary","handleChange","event","target","dataset","secondary","MappedOptions","graph_options","map","option","i","isSecondary","key","SecondaryOptions","className","onChange","data-secondary","row","data-nav","onClick","preventDefault","defaultProps","Object","assign","Spinner","capitalizeFirstLetter","string","charAt","toUpperCase","slice","genHorzBar","xKey","yKey","idVal","data","copy","d3","attr","remove","margin","width","height","length","y","range","padding","x","svg","append","domain","d","bar","selectAll","colors","enter","bandwidth","exit","call","style","checkEndpoint","endpointPrefix","Error","processJson","res","push","useChart","selector","setXKey","setYKey","isLoading","setIsLoading","setData","useEffect","fn","time","timer","clearTimeout","setTimeout","debounce","a","fetch","Math","floor","status","statusText","json","then","shouldHide","toggleSvg","Chart","chartSelector","ToRender","Modal","forwardRef","ref","closeHandler","shouldDisplay","ReactDom","createPortal","role","aria-modal","tabIndex","aria-label","href","rel","document","getElementById","MessageManager","background","boxShadow","App","setShouldDisplay","modalRef","useRef","current","focus","id","jsx","ReactDOM","render"],"mappings":"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","file":"static/js/main.fe52cc67.chunk.js","sourcesContent":["import React, { createContext, FC, useReducer } from 'react'\n\nimport { ContextVals } from '../types'\n\nconst initState = {\n  endpoint: '',\n  message: ''\n}\n\nconst ApiContext = createContext<ContextVals>({\n  state: initState,\n  updateMessageFn: (str: string) => console.log('hi'),\n  updateEndpointFn: (str: string) => console.log('hi'),\n});\n\n\nconst Provider: FC = ({children}) => {\n  const [state, dispatch] = useReducer(reducer, initState)\n\n  const dispatchUpdateEndpointWrap = (dispatch: React.Dispatch<any>) => (str: string) => dispatch({ type: 'UPDATE_ENDPOINT', payload: str })\n\n  const dispatchUpdateMessageWrap = (dispatch: React.Dispatch<any>) => (str: string) => dispatch({ type: 'UPDATE_MESSAGE', payload: str })\n\n  const dispatchEndpointUpdate = dispatchUpdateEndpointWrap(dispatch);\n\n  const dispatchUpdateMessage = dispatchUpdateMessageWrap(dispatch);\n\n\n  return (\n    <ApiContext.Provider\n      value={{\n        state,\n        updateMessageFn: dispatchUpdateMessage,\n        updateEndpointFn: dispatchEndpointUpdate,\n      }}\n    >\n      { children }\n    </ApiContext.Provider>\n  )\n}\n\nfunction reducer(state: any, { type, ...action}: any) {\n  switch (type) {\n    case 'UPDATE_ENDPOINT':\n      return {\n        ...state,\n        endpoint: action.payload\n      }\n    case 'UPDATE_MESSAGE':\n      return {\n        ...state,\n        message: action.payload\n      }\n    default:\n      return state\n  }\n}\n\nexport default Provider;\nexport { ApiContext }","import React, { FC, useState, useContext, FormEvent } from 'react'\nimport { ApiContext } from '../state/Context'\n\nimport './nav.css'\n\nimport { NavProps } from '../types'\n\n\nconst SecondaryArr = [\n  { text: 'Select Boro', path: '' },\n  { text: 'Bronx', path: '/data/bronx/species' },\n  { text: 'Brooklyn', path: '/data/brooklyn/species' },\n  { text: 'Manhattan', path: '/data/manhattan/species' },\n  { text: 'Queens', path: '/data/manhattan/species' },\n  { text: 'Staten Island', path: '/data/staten%20island/species' },\n]\n\nconst NavBar: FC<NavProps> = (props) => {\n  const { updateEndpointFn } = useContext(ApiContext)\n\n  const [primaryValue, setPrimaryValue] = useState('')\n  const [shouldRenderSecondary, setRenderSecondary] = useState(false)\n\n  const handleChange = (event: FormEvent) => {\n    const target = event.target as any\n    if (target.value === 'true') {\n      setRenderSecondary(true)\n    } else if (target.dataset.secondary !== 'true' && shouldRenderSecondary) {\n      setRenderSecondary(false)\n      setPrimaryValue(target.value)\n    }\n    else {\n      setPrimaryValue(target.value)\n    }\n  }\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault()\n    updateEndpointFn(primaryValue)\n  }\n\n  const MappedOptions = props.graph_options!.map((option, i: number) => {\n    return (\n      <option value={option.isSecondary || option.path} key={i}>\n        { option.text }\n      </option>\n    )\n  })\n\n  const SecondaryOptions = shouldRenderSecondary ? (\n    <label  className='label--select'>\n      <span>Choose a Borough:</span>\n      <select className=\"select--primary\" onChange={handleChange} data-secondary={true}>\n        { SecondaryArr.map((row, i) => (\n        <option value={row.path} key={i}>\n          { row.text }\n        </option>\n        )) }\n      </select>\n    </label>\n  ) : null\n\n  return (\n    <div className='ctr-nav'>\n      <nav>\n        <form data-nav='navigation-form'>\n          <label className='label--select'>\n            Choose an option:\n            <select className=\"select--primary\" onChange={handleChange}>\n              { MappedOptions }\n            </select>\n          </label>\n          { SecondaryOptions }\n          <button className='btn btn-primary' onClick={handleSubmit}>\n            Go\n          </button>\n      </form>\n      </nav>\n    </div>\n  )\n}\n\nNavBar.defaultProps = {\n  graph_options: [\n    Object.assign({}, { text: 'Select an option', path: '' }),\n    Object.assign({}, { text: 'Qty Trees Per Borough', path: '/data/count' }),\n    Object.assign({},{ text: 'Qty of Each Tree Species', path: '/data/species' }),\n    Object.assign({},{ text: 'Qty of Each Tree Species in a Borough', path: '', isSecondary: 'true' as string }),\n  ],\n}\n\nexport default NavBar","import React from 'react'\nimport './spinner.css'\n\nconst Spinner = () => (\n  <div className='wrap-spinner'>\n    <div className=\"spinner\"/>\n    <p>Loading...</p>\n  </div>\n)\n\nexport default Spinner","import * as d3 from 'd3'\n\n// TODO make it vertically pannable\nconst genHorzBar = (xKey, yKey, idVal) => (data) => {\n  const copy = [...data]\n\n  d3.select('svg')\n    .attr('width', '0')\n    .remove()\n\n  const margin = {top: 20, right: 110, bottom: 80, left: 150 }\n  const width = 960 - margin.left - margin.right\n  const mod = data.length > 30 ? data.length * 18: 500\n  const height = mod - margin.top - margin.bottom\n  // const height = 700 - margin.top - margin.bottom\n\n  const y = d3.scaleBand()\n    .range([height, 0])\n    .padding(0.1);\n\n  const x = d3.scaleLinear()\n      .range([0, width])\n\n  // append the svg object to the body of the page\n  // append a 'group' element to 'svg'\n  // moves the 'group' element to the top left margin\n  var svg = d3.select(idVal).append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n      .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  // Scale the range of the data in the domains\n  x.domain([0, d3.max(copy, function(d){ return d[xKey]; })])\n  y.domain(copy.map(function(d) { return d[yKey]; }));\n  //y.domain([0, d3.max(data, function(d) { return d.sales; })]);\n\n  // append the rectangles for the bar chart\n  const bar = svg.selectAll(\".bar\")\n    .data(copy, function(d) { return d })\n\n  const colors = d3.scaleOrdinal(d3.schemeCategory10);\n  bar.enter().append(\"rect\")\n      // .attr('width', 0)\n      // .transition()\n    // .merge(bar)\n      .attr(\"class\", \"bar\")\n      .attr('fill', function(d, i) { return colors(i) })\n      // Add a transition so it doesn't do wonky shit???\n      //.attr(\"x\", function(d) { return x(d.sales); })\n      .attr(\"width\", function(d) {return x(d[xKey]); } )\n      .attr(\"y\", function(d) { return y(d[yKey]); })\n      .attr(\"height\", y.bandwidth());\n\n    bar.exit()\n      // .transition()\n        // .attr('height', 0)\n      .remove()\n\n  // add the x Axis\n  svg.append(\"g\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(d3.axisBottom(x));\n\n  // add text label for the x\n  svg.append(\"text\")\n  .attr(\"transform\",\n        \"translate(\" + (width/2) + \" ,\" +\n                       (height + margin.top + 20) + \")\")\n  .style(\"text-anchor\", \"middle\")\n  .text(capitalizeFirstLetter(xKey));\n\n  // add the y Axis\n  svg.append(\"g\")\n    .call(d3.axisLeft(y));\n\n  svg.append(\"text\")\n    .attr(\"transform\", \"rotate(-90)\")\n    .attr(\"y\", 0 - margin.left * 0.85)\n    .attr(\"x\",0 - (height / 2))\n    .attr(\"dy\", \"1em\")\n    .style(\"text-anchor\", \"middle\")\n    .text(capitalizeFirstLetter(yKey));\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\nexport default genHorzBar","import  { useEffect, useState, useContext } from 'react'\nimport * as d3 from 'd3'\n\nimport { ApiContext } from './Context'\n\nimport genHorzBar from './genBarChart'\n\nconst baseEndpoint = process.env.NODE_ENV === 'production' ? 'https://nyc-tree-data-fetcher.herokuapp.com' : 'http://localhost:5000'\n\n\nfunction useChart(selector: string) {\n  // Declaring Context as required state to sync with\n  const { state, updateMessageFn } = useContext(ApiContext)\n\n  const [xKey, setXKey] = useState('')\n  const [yKey, setYKey] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n\n  const [data, setData] = useState<any[]>([])\n\n  const { endpoint, message } = state\n\n  // Performing fetch side effect\n  useEffect(() => {\n    if (endpoint === '' || message !== '') return\n    setIsLoading(true)\n    const asyncFetch = async () => {\n      const { xKey, yKey } = checkEndpoint(endpoint)\n      try {\n        const res = await fetch(baseEndpoint + endpoint)\n\n        if (Math.floor(res.status / 100) >= 4) {\n          const str = await res.text()\n          if (str[0] === '{') {\n            throw new Error(res.statusText)\n          }\n          throw new Error(str)\n        }\n        const data = await res.json().then(json => processJson(xKey, yKey, json.data))\n        // synchronizing local state with Context state\n        setData(data)\n        setXKey(xKey)\n        setYKey(yKey)\n      } catch (err) {\n        // TODO make Context sync with Errors\n        updateMessageFn(err.message)\n        setIsLoading(false)\n      }\n    }\n    debounce(asyncFetch, 250)();\n  }, [endpoint, updateMessageFn, message])\n\n  // Performing D3 DOM modification side effect\n  useEffect(() => {\n    if (data.length === 0) return\n    genHorzBar(xKey, yKey, selector)(data)\n    setIsLoading(i => false)\n  }, [data, xKey, yKey, selector])\n\n  // Performing D3 DOM modification side effect\n  useEffect(() => {\n    if (selector && selector !== '') {\n      toggleSvg(selector, isLoading)\n    }\n  },[selector, isLoading])\n\n  return {\n    isLoading,\n  }\n}\n\nfunction checkEndpoint(endpointPrefix = '') {\n  switch (endpointPrefix) {\n    case '/data/count':\n      return {\n        xKey: 'count',\n        yKey: 'boro'\n      }\n    case '/data/species':\n      return {\n        xKey: 'count',\n        yKey: 'species'\n      }\n    case '/data/brooklyn/species':\n    case '/data/bronx/species':\n    case '/data/queens/species':\n    case '/data/manhattan/species':\n    case '/data/staten%20island/species':\n      return {\n        xKey: 'count',\n        yKey: 'species'\n      }\n    default:\n      throw new Error('Expecting a valid endpoint')\n  }\n}\n\nfunction processJson(xKey:string , yKey:string, data: any) {\n  const res = []\n  const copy = Object.assign({}, data);\n  for (const key in copy) {\n    res.push({ [yKey]: key, [xKey]: copy[key]})\n  }\n  return res\n}\n\nfunction toggleSvg(selector: string, shouldHide: boolean) {\n  if (shouldHide) {\n    d3.select(selector + ' svg')\n      .style('display', 'none')\n  } else {\n    d3.select(selector + 'svg')\n      .attr('visibility', 'visible')\n  }\n}\n\nfunction debounce(fn: () => Promise<void>|void, time: number) {\n  let timer: any;\n\n  return function(this: any) {\n    clearTimeout(timer)\n    timer = setTimeout(() => {\n      // eslint-disable-next-line\n      fn()\n    }, time)\n  }\n}\n\nexport default useChart;","import React, { FC } from 'react'\n\nimport Spinner from './Spinner'\n\nimport useChart from '../state/useChart'\n\nimport { ChartProps } from '../types'\n\n// TODO make Chart render a spinner if it's fetching\nconst Chart: FC<ChartProps> = ({ chartSelector }) => {\n  const { isLoading } = useChart(chartSelector)\n\n  const ToRender = isLoading ? <Spinner/> : null\n  return (\n    <>\n      { ToRender }\n    </>\n  )\n}\n\nexport default Chart;","import React, { forwardRef } from 'react'\nimport ReactDom from 'react-dom'\n\nimport './modal.css'\n\nimport { ModalProps } from '../types'\n\nconst Modal = forwardRef<any, ModalProps>(({ closeHandler, shouldDisplay }, ref) => {\n  return shouldDisplay ? ReactDom.createPortal(\n    (\n      <section\n        role='dialog'\n        aria-modal='true'\n        className='modal'\n        tabIndex={ -1 }\n        ref={ ref }\n      >\n        <header className='modal-header'>\n          <h1>About This Project</h1>\n          <button\n            type='button'\n            className='btn--close'\n            onClick={closeHandler}\n            aria-label='Close'\n          >\n            &times;\n          </button>\n        </header>\n        <div className='modal-body'>\n          <p>\n            This is a learning project meant to be both a practical application of Python/ Flask and as a learning project for <a href='https://d3js.org/' target='_blank' rel=\"noopener noreferrer\">D3.js</a> for data visualization.\n          </p>\n          <p>\n            The data for this project comes from <a href='https://data.cityofnewyork.us/Environment/2015-Street-Tree-Census-Tree-Data/uvpi-gqnh' target='_blank' rel=\"noopener noreferrer\">NYC Open Data's Tree Census</a>. Granted just showing tree census data on it's own isn't exactly very exciting, but this is a start and there's plenty of ways to play with the data.\n          </p>\n          <p>Here's the repository for the <a href='https://github.com/wilsonj806/nyc-arbor-logger' target='_blank' rel='noopener noreferrer'>React app</a></p>\n          <p>Here's the repository for the <a href='https://github.com/wilsonj806/nyc-tree-data-fetcher' target='_blank' rel='noopener noreferrer'>Python/ Flask app</a></p>\n        </div>\n      </section>\n    ),\n    document.getElementById('portal') as Element\n  ) : null\n})\n\nexport default Modal","import React, { useContext } from 'react'\nimport { ApiContext } from '../state/Context'\n\nimport './message.css'\n\n// TODO add message closing\nconst MessageManager = () => {\n  const { state } = useContext(ApiContext)\n  const { message } = state;\n\n  const style = (message === '') ? { background: 'transparent' } : { background: 'rgb(248, 30, 30)',   boxShadow: '2px 2px 4px rgba(44, 44, 44, 0.25)'\n}\n\n  return (\n    <section className='message' style={style} role='alert'>\n      <p>{ message }</p>\n    </section>\n  )\n}\n\nexport default MessageManager","import React, { useState, SyntheticEvent, useRef, useEffect } from 'react';\n\nimport NavBar from './components/NavBar'\nimport Chart from './components/Chart'\nimport Modal from './components/Modal'\nimport MessageManager from './components/MessageManager';\n\n\nfunction App() {\n  const [shouldDisplay, setShouldDisplay] = useState(false)\n  const modalRef = useRef<HTMLElement>(null)\n\n  useEffect(() => {\n    if(shouldDisplay && modalRef && modalRef.current) {\n      modalRef.current.focus()\n    }\n  }, [shouldDisplay])\n\n  const handleFabClick = () => setShouldDisplay(!shouldDisplay)\n\n  const handleClick = (event: SyntheticEvent) => {\n    const target = event.target as Element;\n    if (!shouldDisplay && target.id !== 'fab--info') return;\n    if (shouldDisplay) {\n      setShouldDisplay(false);\n    }\n  }\n\n  const closeButtonClick = () => setShouldDisplay(false)\n\n  return (\n    <>\n      <Modal\n        ref={ modalRef }\n        closeHandler={ closeButtonClick }\n        shouldDisplay={ shouldDisplay }\n      />\n      <div className=\"App\" onClick={ handleClick }>\n        <header className=\"App-header\">\n          <h1>NYC Arbor Logger</h1>\n        </header>\n        <MessageManager />\n        <NavBar/>\n        <div\n          id='d3-stuff'\n        >\n          <Chart chartSelector='#d3-stuff'/>\n        </div>\n        <button className='fab' id='fab--info' onClick={handleFabClick}>\n          ?\n        </button>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Provider from './state/Context'\nimport App from './App';\n\nconst jsx = (\n  <Provider>\n    <App/>\n  </Provider>\n)\nReactDOM.render(jsx, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}